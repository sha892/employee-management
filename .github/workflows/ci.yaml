
# Define the CI/CD Workflow for Java code
name: CI-CD Workflow for java code 

# Trigger the workflow on pushes to the specified branch
on:
  push:
      
# Define permissions required for the OIDC connection
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This permission allows reading the content of files in the repository# The jobs to be executed in the workfloww

jobs:
  # CI job
  build:
    runs-on: ubuntu-latest

    # Define the steps to be executed in the job
    steps:
    # Checkout the repository to access source code
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Snyk CLI to check for security issues
      uses: snyk/actions/setup@master
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
       distribution: 'temurin'
       java-version: '17'
      env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    # Run unit tests using maven goal
    - name: Run unit test
      run: mvn test

    # - name : mvn install
    #   run : mvn install 

    # Authenticate with Snyk
    - name: Authenticate with Snyk
      run: snyk auth ${{ secrets.SNYK_TOKEN }}

    #  # Snyk Code scan
    # - name: Snyk Code scan
    #   run: snyk code test

    # Snyk Open Source 
    # - name: Snyk dependency scan
    #   run: snyk test --all-projects --maven

    # - name: Check for Critical/High Vulnerabilities
    #   run: |
    #     snyk test --all-projects --severity-threshold=high --maven
    #     if [ $? -eq 0 ]; then
    #       echo "No critical or high vulnerabilities found."
    #     else
    #       echo "Critical or high vulnerabilities found. Failing the build."
    #       exit 1
    #     fi

    - name: Generate SBOM report with Snyk
      run: snyk sbom --file=pom.xml --format=spdx2.3+json
      # run: snyk sbom --format=cyclonedx1.4+json --debug > bom.json

     # Upload SBOM report as an artifact
    - name: Upload SBOM report
      uses: actions/upload-artifact@v3
      with:
        name: SBOM Report
        path: snyk-sbom.spdx.json

    # Generate code-coverage report using jacoco
    - name : Get code-coverage report
      run : mvn jacoco:report
      
    # Upload code-coverage report as an artifact
    - name: Code Coverage Report
      uses: actions/upload-artifact@v3
      with:
        name: Code Coverage Reports
        path: target/site/jacoco/index.html   # Code coverage report will be generate at 'target/site/jacoco/index.html'
    
    # # Sonarqube Scan using maven command
    # - name: SonarQube Scan
    #   run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}  -Dsonar.login=${{ secrets.SONAR_TOKEN }} 

    #  # Check sonarqube quality gate using script to make a GET request to the SonarQube API endpoint and retrieve the status of the quality gate
    # - name: Check SonarQube Quality Gate
    #   run: |
    #     status=$(curl -s "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=${{ secrets.SONAR_PROJECT_KEY }}" -u "${{ secrets.SONAR_TOKEN }}": | jq -r '.projectStatus.status')
    #     if [[ "$status" != "OK" ]]; then
    #        echo "SonarQube quality gate check failed." 
    #     else
    #        echo "SonarQube quality gate check succeeded. Continuing with the workflow..."
    #     fi
     # if exit code 1 is added after (echo "SonarQube quality gate check failed.") workflow will fail which will check for quality gate condition 

    # Once we build the package using maven as build tool the artifact generated is in jar format and store under target directory
    - name: Build project and package jar
      run: mvn package
      
    # # Build trust between GitHub and AWS using OIDC connector
    # - name: configure aws credentials
    #   uses: aws-actions/configure-aws-credentials@v3
    #   with:
    #       role-to-assume: ${{ secrets.AWS_IAM_ARN }}
    #       role-session-name: samplerolesession
    #       aws-region: ${{ secrets.AWS_REGION }}

    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Authenticate AWS with Docker to interact with an Amazon ECR registry
    - name: Login to Amazon ECR
      run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
    
    # Build the Docker image using Dockerfile & tag it with commit SHA, & push it to ECR repository
    - name: Build Docker Image
      run: |
          docker build -t employee:latest .
          docker tag employee:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:latest

    # - name: Run Snyk to check Docker images for vulnerabilities
    #   uses: snyk/actions/docker@master
    #   env:
    #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    #   with:
    #     image: employee
        
    # Push Docker image to Amazon ECR
    - name: push docker image
      run:  |
       docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:latest

    - name: Snyk Monitor
      run: snyk monitor

    # - name: Run Snyk to check Kubernetes manifest file for issues
    #   uses: snyk/actions/iac@master
    #   env:
    #       SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    #   with:
    #       file: ./manifests/service.yaml

    # - name: Run Snyk to check Kubernetes manifest file for issues (Deployment.yaml)
    #   uses: snyk/actions/iac@master
    #   env:
    #      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    #   with:
    #     file: ./manifests/deployment.yaml
    #     args: --severity-threshold=high


  
      
      
      
      
      
      
      
      


      






















      
       
       
